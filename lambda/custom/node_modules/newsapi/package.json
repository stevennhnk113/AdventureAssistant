{
  "_args": [
    [
      {
        "raw": "newsapi",
        "scope": null,
        "escapedName": "newsapi",
        "name": "newsapi",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\Steve\\Adventure_Assistant\\lambda\\custom"
    ]
  ],
  "_from": "newsapi@latest",
  "_id": "newsapi@2.2.2",
  "_inCache": true,
  "_location": "/newsapi",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/newsapi_2.2.2_1522119255444_0.6641921668154656"
  },
  "_npmUser": {
    "name": "bzarras",
    "email": "benzarras+npm@gmail.com"
  },
  "_npmVersion": "5.7.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "newsapi",
    "scope": null,
    "escapedName": "newsapi",
    "name": "newsapi",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/newsapi/-/newsapi-2.2.2.tgz",
  "_shasum": "e09b57251e895014ad7ae70e8552e5618ace21a8",
  "_shrinkwrap": null,
  "_spec": "newsapi",
  "_where": "C:\\Users\\Steve\\Adventure_Assistant\\lambda\\custom",
  "author": {
    "name": "Ben Zarras"
  },
  "bugs": {
    "url": "https://github.com/bzarras/newsapi/issues"
  },
  "dependencies": {
    "bluebird": "^3.4.6",
    "node-fetch": "^2.1.1"
  },
  "description": "A node interface for the awesome News API from newsapi.org",
  "devDependencies": {
    "dotenv": "^5.0.0",
    "mocha": "^3.1.2",
    "should": "^11.1.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-b7p2bKoOA7NPShQgeq+swvu95w4KZvGG9G7Q0LyyRXAK7aZ80yWHgsBe6hM4tlX+GhoBvPQN9M2jbYjVTE6DAA==",
    "shasum": "e09b57251e895014ad7ae70e8552e5618ace21a8",
    "tarball": "https://registry.npmjs.org/newsapi/-/newsapi-2.2.2.tgz",
    "fileCount": 7,
    "unpackedSize": 15006
  },
  "gitHead": "7f10c1d089097e3e394fd206a8a8efaec41344a5",
  "homepage": "https://github.com/bzarras/newsapi#readme",
  "keywords": [
    "news",
    "api",
    "newsapi",
    "news api"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "bzarras",
      "email": "benzarras+npm@gmail.com"
    }
  ],
  "name": "newsapi",
  "optionalDependencies": {},
  "readme": "# newsapi\n\nA node interface for NewsAPI.\n\n[![npm](https://img.shields.io/npm/v/newsapi.svg)](https://www.npmjs.com/package/newsapi)\n[![npm](https://img.shields.io/npm/dt/newsapi.svg)](https://www.npmjs.com/package/newsapi)\n[![Build Status](https://travis-ci.org/bzarras/newsapi.svg?branch=master)](https://travis-ci.org/bzarras/newsapi)\n\nUp-to-date news headlines and metadata in JSON from 70+ popular news sites. Powered by NewsAPI.org.\n\nYou will need an API key from [https://newsapi.org](https://newsapi.org).\n\nPlease look at their [documentation](https://newsapi.org/docs) to see how to use the API. The convenience functions provided by this module\nsimply pass their options along as querystring parameters to the REST API, so the [documentation](https://newsapi.org/docs)\nis totally valid. There are some usage examples below to see how these options should be passed in.\n\nIf you use this in a project, add a 'powered by' attribution link back to NewsAPI.org\n\n## Add to your project\n```shell\n$ npm install newsapi --save\n```\n\n## Test\n```shell\n$ API_KEY=<your api key> npm test\n```\n\n## Example usage of v2 API\nAll methods support promises and node-style callbacks.\n```js\nconst NewsAPI = require('newsapi');\nconst newsapi = new NewsAPI('YOUR_API_KEY');\n\n// To query top headlines\n// All options passed to topHeadlines are optional, but you need to include at least one of them\nnewsapi.v2.topHeadlines({\n  sources: 'bbc-news,the-verge',\n  q: 'trump',\n  category: 'politics',\n  language: 'en',\n  country: 'us'\n}).then(response => {\n  console.log(response);\n  /*\n    {\n      status: \"ok\",\n      articles: [...]\n    }\n  */\n});\n\n// To query everything\n// You must include at least one q, source, or domain\nnewsapi.v2.everything({\n  q: 'trump',\n  sources: 'bbc-news,the-verge',\n  domains: 'bbc.co.uk, techcrunch.com',\n  from: '2017-12-01',\n  to: '2017-12-12',\n  language: 'en',\n  sortBy: 'relevancy',\n  page: 2\n}).then(response => {\n  console.log(response);\n  /*\n    {\n      status: \"ok\",\n      articles: [...]\n    }\n  */\n});\n\n// To query sources\n// All options are optional\nnewsapi.v2.sources({\n  category: 'technology',\n  language: 'en',\n  country: 'us'\n}).then(response => {\n  console.log(response);\n  /*\n    {\n      status: \"ok\",\n      sources: [...]\n    }\n  */\n});\n```\n\n## Example usage of v1 legacy API\n```js\nconst NewsAPI = require('newsapi');\nconst newsapi = new NewsAPI('YOUR_API_KEY');\n\n// To query articles:\nnewsapi.articles({\n  source: 'associated-press', // required\n  sortBy: 'top' // optional\n}).then(articlesResponse => {\n  console.log(articlesResponse);\n  /*\n    {\n      status: \"ok\",\n      source: \"associated-press\",\n      sortBy: \"top\",\n      articles: [...]\n    }\n   */\n});\n\n// To query sources:\nnewsapi.sources({\n  category: 'technology', // optional\n  language: 'en', // optional\n  country: 'us' // optional\n}).then(sourcesResponse => {\n  console.log(sourcesResponse);\n  /*\n    {\n      status: \"ok\",\n      sources: [...]\n    }\n  */\n});\n\n// For both methods you can also use traditional Node callback style:\nnewsapi.articles({\n  source: 'associated-press',\n  sortBy: 'top'\n}, (err, articlesResponse) => {\n  if (err) console.error(err);\n  else console.log(articlesResponse);\n});\n```\n\n## Caching\n[NewsAPI's caching behavior](https://newsapi.org/docs/caching).\nYou can disable caching on a request level by adding the `noCache: true` option to your queries.\n```js\nnewsapi.v2.everything({\n  sources: 'bbc-news'\n}, {\n  noCache: true\n}).then(response => {\n  ...\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bzarras/newsapi.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "2.2.2"
}
